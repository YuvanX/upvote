generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  votes         Vote[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String @id @default(uuid())
  title       String
  description String
  tag         Tag
  upvotes     Int    @default(0)
  downvotes   Int    @default(0)
  userId      String 
  votes       Vote[]
  createdAt DateTime @default(now())

  user        User    @relation(fields: [userId], references: [id]) 
}
model Vote {
  id          String @id @default(cuid())
  voteType    VoteType
  userId      String
  postId      String

  createdAt   DateTime @default(now())

  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
enum Tag {
  Idea
  Issue
}
